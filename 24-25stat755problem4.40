library(MASS)
library(mnormt)
library(stats)
data <- data.frame(national_park = c("Arcadia", "Bruce Canyon", "Cuyahoga Valley", 
                                     "Everglades", "Grand Canyon", "Grand Teton", "Great Smoky", "Hot Springs", 
                                     "Olympic", "Mount Rainier", "Rocky Mountain", "Shenandoah", "Yellowstone", 
                                     "Yosemite", "Zion"), 
                   size = c(47.4, 35.8, 32.9, 1508.5, 1217.4, 310.0, 521.8, 5.6,
                                                                   922.7, 235.6, 265.8, 199.0, 2219.8, 761.3, 146.6),
                   visitors = c(2.05, 1.02, 2.53, 1.23, 4.40, 2.46, 9.19, 1.34, 3.14, 1.17, 2.80, 1.09, 2.84, 3.30, 2.59))
data <- as.data.frame(data)

plot(data$size, data$visitors, xlab = "Size (acres)", ylab = "Visitors (millions)", main = "Size vs Visitors for National Parks Scatterplot")
points(521.8, 9.19, col = "red", pch = 16)
points(2219.8, 2.84, col = "blue",pch = 16)


b <- boxcox(lm(data$visitors~1))
optimal_lambda <- b$x[which.max(b$y)]
optimal_lambda

x<-data$visitors
len <- length(x)
x<-sort(x)
y <-seq(1:len)
probs <- (y-0.5)/len
par(mfrow = c(1,2))
par(pty = "s")
nqs <- qnorm(probs)
plot(x, nqs, xlab = "Expected Quantile", ylab = "Observed", main = "Q-Q Plot for Original Data")
cor(x, nqs)

xt <- (x^-0.3434343434343434 - 1)/-0.3434343434343434
plot(xt, nqs, xlab = "Expected Quantile", ylab = "Observed", main = "Q-Q Plot for Transformed Data")
cor(xt, nqs)



log_function <- function(lambda1, lambda2, data){
  n <- nrow(data)
  transformed <- data.frame(size = ((data$size)^lambda1 - 1)/lambda1, visitors = ((data$visitors)^lambda2 - 1)/lambda2)
  S <- cov(transformed)
  print(transformed)
  dim(S)
  if (det(S) <= 0){
    return(-100000000)
  }
  return(-(n/2)*log(det(S)) + (lambda1 - 1)*sum(log(data$size)) + (lambda2 -1)*(sum(log(data$visitors))))
}
lambda_range <- seq(-1, 1, 0.01)
max_likelihood <- -1000000000
best_lambda1 <- 1
best_lambda2 <- 1
for (lambda1 in lambda_range){
  for (lambda2 in lambda_range){
    if (log_function(lambda1, lambda2, data) > max_likelihood){
      max_likelihood <- log_function(lambda1, lambda2, data)
      best_lambda1 <- lambda1
      best_lambda2 <- lambda2
    }
  }
}
